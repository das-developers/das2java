/* File: DasProgressPanel.java
 * Copyright (C) 2002-2003 The University of Iowa
 * Created by: Jeremy Faden <jbf@space.physics.uiowa.edu>
 *             Jessica Swanner <jessica@space.physics.uiowa.edu>
 *             Edward E. West <eew@space.physics.uiowa.edu>
 *
 * This file is part of the das2 library.
 *
 * das2 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package edu.uiowa.physics.pw.das.components;

/**
 *
 * @author  eew
 */
public class DasProgressPanel extends javax.swing.JPanel implements edu.uiowa.physics.pw.das.event.DasReaderListener, edu.uiowa.physics.pw.das.dataset.DataRequestor, edu.uiowa.physics.pw.das.event.ProgressIndicator {
    
    private long readerStartedTime;
    private int currentBytes;
    private int totalBytes;
    private java.text.DecimalFormat transferRateFormat;
    
    /** Creates new form DasProgressPanel */
    public DasProgressPanel() {
        initComponents();
        transferRateFormat= new java.text.DecimalFormat();
        transferRateFormat.setMaximumFractionDigits(2);
        totalBytes=-1;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        javax.swing.JLabel bigLabel;

        bigLabel = new javax.swing.JLabel();
        bottomPanel = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        kbLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridLayout(0, 1));

        setName("progressDialog");
        bigLabel.setBackground(new java.awt.Color(240, 240, 240));
        bigLabel.setFont(new java.awt.Font("Dialog", 1, 18));
        bigLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bigLabel.setText("Loading Data Set");
        bigLabel.setOpaque(true);
        add(bigLabel);

        bottomPanel.setLayout(new javax.swing.BoxLayout(bottomPanel, javax.swing.BoxLayout.Y_AXIS));

        bottomPanel.setBackground(new java.awt.Color(240, 240, 240));
        progressBar.setBackground(new java.awt.Color(240, 240, 240));
        progressBar.setMaximumSize(progressBar.getPreferredSize());
        progressBar.setMinimumSize(progressBar.getPreferredSize());
        bottomPanel.add(progressBar);

        kbLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        kbLabel.setText("0 kb");
        kbLabel.setAlignmentX(0.5F);
        kbLabel.setMaximumSize(progressBar.getPreferredSize());
        kbLabel.setMinimumSize(progressBar.getPreferredSize());
        kbLabel.setPreferredSize(progressBar.getPreferredSize());
        bottomPanel.add(kbLabel);

        add(bottomPanel);

    }//GEN-END:initComponents
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
            }//GEN-LAST:event_closeDialog
    
    public void readerUpdate(edu.uiowa.physics.pw.das.event.DasReaderEvent e) {
        double elapsedTimeMs= System.currentTimeMillis()-readerStartedTime;
        if ( elapsedTimeMs > 400 ) setVisible(true); else setVisible(false);
        int kb = e.getByteCount() / 1024;
        
        currentBytes= e.getByteCount();
        
        if ( totalBytes>0 ) {
            progressBar.setValue(kb * 100 / (totalBytes/1024));
        } else {
            progressBar.setValue(kb % 100);
        }
        
        String bytesReadLabel;
        if ( totalBytes>0 ) {
            bytesReadLabel= ""+kb+"/"+totalBytes/1024+"kb";
        } else {
            bytesReadLabel= ""+kb+"kb";
        }
        
        if ( elapsedTimeMs > 1000 ) {
            double transferRate= ( e.getByteCount() / 1024 ) /
            ( elapsedTimeMs / 1000. );
            kbLabel.setText(bytesReadLabel+" ("+transferRateFormat.format(transferRate)+"kb/s)");
        } else {
            kbLabel.setText(bytesReadLabel);
        }
        if (java.awt.Toolkit.getDefaultToolkit().getSystemEventQueue().isDispatchThread()) {
            paintImmediately(0, 0, getWidth(), getHeight());
        }
        else {
            repaint();
        }
    }
    
    /**
     * Provided for future compatibility.  Not currently specified
     * by edu.uiowa.physics.pw.das.event.DasReaderListener
     */
    public void readerFinished(edu.uiowa.physics.pw.das.event.DasReaderEvent e) {
        setVisible(false);
        kbLabel.setText("");
        totalBytes=-1;
    }
    
    /** Shows or hides this component depending on the value of parameter
     * <code>b</code>.
     * @param b  if <code>true</code>, shows this component;
     * otherwise, hides this component
     * @see #isVisible
     * @since JDK1.1
     */
    public void setVisible(boolean b) {
        super.setVisible(b);
    }
    
    public void readerStarted(edu.uiowa.physics.pw.das.event.DasReaderEvent e) {
        readerStartedTime= System.currentTimeMillis();
        currentBytes= 0;
    }
    
    public void currentByteCount(int byteCount) {
        if ( byteCount==-1 ) {
            edu.uiowa.physics.pw.das.event.DasReaderEvent e= new edu.uiowa.physics.pw.das.event.DasReaderEvent(this,0);
            readerStarted(e);
        } else {
            edu.uiowa.physics.pw.das.event.DasReaderEvent e= new edu.uiowa.physics.pw.das.event.DasReaderEvent(this,byteCount);
            readerUpdate(e);
        }
    }
    
    public void exception(Exception e) {}
    
    public void finished(edu.uiowa.physics.pw.das.dataset.DataSet ds) {
        edu.uiowa.physics.pw.das.event.DasReaderEvent e= new edu.uiowa.physics.pw.das.event.DasReaderEvent(this,0);
        readerFinished(e);
    }
    
    public void totalByteCount(int byteCount) {
        totalBytes= byteCount;
    }
    
    public void finished() {
    }
    
    /* ProgressIndicator interface */
    public void setTaskProgress(int position) {
        edu.uiowa.physics.pw.das.event.DasReaderEvent e= new edu.uiowa.physics.pw.das.event.DasReaderEvent(this,position);
        readerUpdate(e);
    }
    
    public int getTaskProgress() {
        return currentBytes;
    }
    
    public void setTaskSize(int taskSize) {
        totalByteCount(taskSize);
    }
    
    public void started() {
        edu.uiowa.physics.pw.das.event.DasReaderEvent e= new edu.uiowa.physics.pw.das.event.DasReaderEvent(this,0);
        readerStarted(e);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JLabel kbLabel;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
}
