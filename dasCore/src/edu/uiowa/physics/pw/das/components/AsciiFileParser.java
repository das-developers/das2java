/*
 * AsciiFileParser.java
 *
 * Created on July 13, 2006, 3:26 PM
 */

package edu.uiowa.physics.pw.das.components;

import org.das2.dataset.DataSet;
import org.das2.dataset.VectorDataSetBuilder;
import org.das2.datum.Datum;
import org.das2.datum.Units;
import org.das2.util.DasExceptionHandler;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.event.MouseInputAdapter;

/**
 * Interactive GUI for parsing ascii tables into VectorDataSets
 *
 * @author  Jeremy
 */
public class AsciiFileParser extends javax.swing.JPanel {
    
    /** Creates new form AsciiFileParser */
    public AsciiFileParser() {
        initComponents();
        jTextField1.addFocusListener( new FocusAdapter() {
            public void focusLost(FocusEvent e) {
                updateSkipLines();
            }
        });
        model= new AsciiTableModel();
    }
    
    class AsciiTableModel {
        int columnCount=0;
        int[] columnOffsets= new int[50];
        int[] columnWidths= new int[50];
        Units[] units= new Units[50];
        String[] names= new String[50];
        int skipLines=0;
    }
    
    AsciiTableModel model;
    File file;
    
    public DataSet parse() throws FileNotFoundException, IOException, ParseException {
        
        ArrayList usableColumns= new ArrayList();
        for ( int i=0; i<model.columnCount; i++ ) {
            if ( model.units[i]!=null ) {
                usableColumns.add( new Integer(i) );
            }
        }
        
        if ( usableColumns.size()<2 ) throw new IllegalArgumentException( "not enough columns" );
        
        int[] iu= new int[usableColumns.size()];
        for ( int i=0; i<iu.length; i++ ) {
            iu[i]= ((Integer)usableColumns.get(i)).intValue();
        }
        
        int col0= ((Integer)usableColumns.get(0)).intValue();
        int col1= ((Integer)usableColumns.get(1)).intValue();
        
        VectorDataSetBuilder builder= new VectorDataSetBuilder( model.units[col0], model.units[col1] );
        for ( int i=2; i<iu.length; i++ ) {
            builder.addPlane( model.names[iu[i]], model.units[iu[i]] );
        }
        
        BufferedReader reader= new BufferedReader( new FileReader( file ) );
        
        for ( int iskip=0; iskip<model.skipLines; iskip++ ) {
            reader.readLine();
        }
        
        int iline= model.skipLines;
        
        String s= reader.readLine();
        iline++;
        
        while ( s!=null ) {
            try {
                Datum d0= model.units[col0].parse( s.substring( model.columnOffsets[col0], model.columnOffsets[col0]+model.columnWidths[col0] ) );
                Datum d1= model.units[col1].parse( s.substring( model.columnOffsets[col1], model.columnOffsets[col1]+model.columnWidths[col1] ) );
                builder.insertY( d0, d1 );
                for ( int i=2; i<iu.length; i++ ) {
                    Datum di= model.units[iu[i]].parse( s.substring( model.columnOffsets[iu[i]], model.columnOffsets[iu[i]]+model.columnWidths[iu[i]] ) );
                    builder.insertY( d0, di, model.names[iu[i]] );
                }
                s= reader.readLine();
                iline++;
            } catch ( ParseException ex ) {
                throw new ParseException( "Parse error at line "+iline, iline );
            }
        }
        
        reader.close();
        
        return builder.toVectorDataSet();
    }
    
    private void updateSkipLines() {
        try {
            model.skipLines= Integer.parseInt( jTextField1.getText() );
        } catch ( NumberFormatException e ) {
        }
        jTextField1.setText( ""+model.skipLines );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        delimSelector = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        firstColumnTimeCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jTextArea1 = new FixedColumnTextArea();
        jTextArea2 = new FixedColumnTextArea();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        jLabel1.setText("File:");

        jLabel2.setText("f:\\myfile.txt");

        delimSelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "WhiteSpace", "Comma", "RegExp (\\s\\s+)" }));
        delimSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delimSelectorActionPerformed(evt);
            }
        });

        jLabel3.setText("Delimiter:");

        jButton1.setText("choose");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        firstColumnTimeCheckBox.setText("FirstColumnTime");
        firstColumnTimeCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        firstColumnTimeCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jPanel1.setLayout(new java.awt.BorderLayout());

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jPanel1.add(jTextArea1, java.awt.BorderLayout.CENTER);

        jTextArea2.setBackground(new java.awt.Color(238, 238, 255));
        jTextArea2.setColumns(20);
        jTextArea2.setRows(1);
        MouseInputAdapter mia= new ColumnMouseInputAdapter((FixedColumnTextArea)jTextArea2);
        jTextArea2.addMouseListener(mia);
        jPanel1.add(jTextArea2, java.awt.BorderLayout.NORTH);

        jScrollPane1.setViewportView(jPanel1);

        jLabel4.setText("SkipLines:");

        jTextField1.setText("0");
        jTextField1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextField1PropertyChange(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 264, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(delimSelector, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(firstColumnTimeCheckBox)
                        .add(77, 77, 77)
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jLabel1)
                    .add(jButton1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(delimSelector, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(firstColumnTimeCheckBox)
                    .add(jLabel4)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void jTextField1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextField1PropertyChange
        updateSkipLines();
    }//GEN-LAST:event_jTextField1PropertyChange
    
    private void delimSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delimSelectorActionPerformed
        try {
            resetDelims();
        } catch ( IOException e ) {
            handleException(e);
        }
    }//GEN-LAST:event_delimSelectorActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser= new JFileChooser();
        int retVal= chooser.showOpenDialog(this);
        if ( retVal==chooser.APPROVE_OPTION ) {
            try {
                setFile( chooser.getSelectedFile() );
            } catch (IOException ex) {
                handleException(ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void handleException( Throwable t ) {
        DasExceptionHandler.handle(t);
    }
    
    private void setFile(File file) throws IOException {
        this.file= file;
        resetDelims();
    }
    
    public String getDelimRegex() {
        String result;
        switch ( delimSelector.getSelectedIndex() ) {
            case 0: result="\\s+"; break;
            case 1: result=","; break;
            case 2: result="\\s\\s+"; break;
            default: throw new IllegalStateException("not implemented");
        }
        return result;
    }
    
    public void resetDelims() throws IOException {
        String regex= getDelimRegex();
        BufferedReader reader= new BufferedReader( new FileReader( file ) );
        
        for ( int i=0; i<model.skipLines; i++ ) reader.readLine();
        
        String line= reader.readLine();
        
        String[] ss= line.split(regex);
        
        model.columnCount= ss.length;
        int col=0;
        model.columnOffsets[0]= 0;
        for ( int i=1; i<ss.length; i++ ) {
            col= line.indexOf(ss[i],col+ss[i-1].length()); // account for whitespace
            model.columnOffsets[i]= col;
            model.columnWidths[i-1]= model.columnOffsets[i] - model.columnOffsets[i-1];
        }
        
        model.columnWidths[ss.length-1]= line.length()- model.columnOffsets[ss.length-1];
        
        StringBuffer text= new StringBuffer( line+'\n' );
        int linenum=1;
        while ( line!=null && linenum<100 ) {
            text.append(line+'\n');
            line= reader.readLine();
            linenum++;
        }
        jTextArea1.setText(text.toString());
        int[] colDiv= new int[model.columnCount];
        for ( int i=0; i<model.columnCount; i++ ) colDiv[i]= model.columnOffsets[i];
        
        ((FixedColumnTextArea)jTextArea1).setColumnDividers(colDiv);
        ((FixedColumnTextArea)jTextArea2).setColumnDividers(colDiv);
        
        jTextArea1.setCaretPosition(0);
        
        reader.close();
    }
    
    void resetColumnLabels() {
        StringBuffer buf= new StringBuffer(256);
        for ( int i=0; i<256; i++ ) buf.append(" ");
        for ( int i=0; i<model.columnCount; i++ ) {
            if ( model.units[i]!=null ) {
                if ( model.units[i]==Units.dimensionless ) {
                    buf.insert( model.columnOffsets[i], "(dim)" );
                } else {
                    buf.insert( model.columnOffsets[i], model.units[i].toString() );
                }
            }
        }
        jTextArea2.setText(buf.toString());
        jTextArea2.setCaretPosition(0);
        
    }
    
    class ColumnMouseInputAdapter extends MouseInputAdapter {
        JPopupMenu unitsMenu;
        final FixedColumnTextArea parent;
        int contextColumn;
        
        ColumnMouseInputAdapter(final FixedColumnTextArea parent) {
            this.parent= parent;
            unitsMenu= new JPopupMenu();
            ActionListener listener= new ActionListener() {
                public void actionPerformed( ActionEvent e ) {
                    String command= e.getActionCommand();
                    if ( command.equals("ignore") ) {
                        model.units[contextColumn]= null;
                    } else if ( command.startsWith("units=") ) {
                        Units u= Units.getByName(command.substring(6));
                        model.units[contextColumn]= u;
                    } else if ( command.equals("name") ) {
                        JOptionPane j= new JOptionPane();
                        String result= j.showInputDialog( parent, "Enter a column name",
                                "Column Name", JOptionPane.DEFAULT_OPTION );
                        if ( result!=null ) model.names[contextColumn]= result;
                    }
                    resetColumnLabels();
                }
            };
            
            JMenuItem item;
            item= new JMenuItem("(ignore)");
            item.setActionCommand("ignore");
            item.addActionListener(listener);
            unitsMenu.add( item );
            item= new JMenuItem("dimensionless Datum");
            item.setActionCommand("units=");
            item.addActionListener(listener);
            unitsMenu.add( item );
            item= new JMenuItem("time Datum (us2000)");
            item.setActionCommand("units=us2000");
            item.addActionListener(listener);
            unitsMenu.add( item );
            item= new JMenuItem("Datum (KHz)");
            item.setActionCommand("units=kHz");
            item.addActionListener(listener);
            unitsMenu.add( item );
            item= new JMenuItem("name this column");
            item.setActionCommand("name");
            item.addActionListener(listener);
            unitsMenu.add( item );
        }
        public void mousePressed( MouseEvent me ) {
            contextColumn= ((FixedColumnTextArea)jTextArea2).columnAt(me.getX());
            unitsMenu.show(parent,me.getX(),me.getY());
        }
    }
    
    
//    private TableModel getTableModel( final VectorDataSet vds ) {
//        return new AbstractTableModel() {
//            String[] ids= DataSetUtil.getAllPlaneIds( vds );
//            public int getRowCount() {
//                return vds.getXLength();
//            }
//            public int getColumnCount() {
//                return ids.length + 1;
//            }
//            public Object getValueAt( int row, int column ) {
//                if ( column==0 ) {
//                    return vds.getXTagDatum(row);
//                } else {
//                    return vds.getDatum( row ); // TODO: support planes
//                }
//            }
//        };
//    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox delimSelector;
    private javax.swing.JCheckBox firstColumnTimeCheckBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    
}
