/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.das2.reader;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

/** Provide a command line interface for executing readers that implement the StreamSource
 * interface.
 *
 * The basic command line supported is:
 *
 * java -cp dasCore.jar org.das2.reader.RunRdr DSID_FILE key1=value1 key2=value2 ...
 *
 * if FILE is "-h", "--help", "help" and no key, value pairs are specified then basic
 * help text is generated.  To get command line options for a specific reader:
 *
 * java -cp dasCore.jar org.das2.reader.RunRdr DSID_FILE help
 *
 * to get information on a specific reader:
 *
 * java -cp dasCore.jar org.das2.reader.RunRdr DSID_FILE info
 *
 * @author cwp
 */
public class RunRdr {
	static public void main( String[] args) throws ParserConfigurationException{

		Logger logger = Logger.getLogger("ReaderRunner");

		// Make the logger output prettier, since these messages may be seen by an end user
		logger.setUseParentHandlers(false);
		ConsoleHandler hndlr = new ConsoleHandler();
		hndlr.setFormatter(new RdrLogFormatter());
		logger.addHandler(hndlr);
		logger.setLevel(Level.INFO);
		hndlr.setLevel(Level.ALL);  // don't do extra filtering on stuff sent to us by
		                            // the main logger

		// If nothing is specified, just provide a hint
		if(args.length == 0){

			System.err.print("Data source ID file wasn't specified, use -h for help.\n");

			// Supposedly return values 1 and 2, and values 126 and above mean something for
			// the shell itself and shouldn't be used by application programs. See:
			// http://www.tldp.org/LDP/abs/html/exitcodes.html#EXITCODESREF
			System.exit(3);
		}

		// If args[0] is special, provide more help
		for(String sTest: new String[]{"-h", "--help", "help"}){
			if(sTest.equals(args[0].toLowerCase())){
				System.err.print(
  "\nRunRdr - Load and run a Das2 StreamSource from the command line.\n"
+ "\n"
+ "Usage:\n"
+ "  java -cp dasCore.jar org.das2.reader.RunRdr DSID_FILE key1=val1 key2=val2 ...\n"
+ "\n"
+ "  java -cp dasCore.jar org.das2.reader.RunRdr DSID_FILE help\n"
+ "\n"
+ "  java -cp dasCore.jar org.das2.reader.RunRdr DSID_FILE info\n"
+ "\n"
+ "Description:\n"
+ "  RunRdr parses a given Data Source ID file, loads the StreamSource Java class\n"
+ "  given in the file, parses the command line arguments into data selection\n"
+ "  parameters, and then runs the reader.\n"
+ "\n"
+ "  Two special arguments are supported 'help' and 'info'.  'Help' provides details on\n"
+ "  how to run the reader, and 'info' describes the data generated by the reader.\n"
+ "\n"
				);
				System.exit(0); //Getting help is a normal thing to do.
			}
		}

		// Okay, args[0] is supposed to be a DSID file, load it.
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();

		dbf.setValidating(true);
		dbf.setNamespaceAware(true);
		dbf.setCoalescing(true);

		SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
		URL url = RunRdr.class.getResource("/schema/das3_dsid-0.2.xsd");
		Schema schema = null;
		try{
			schema = sf.newSchema(url);
		}
		catch(SAXException ex){
			logger.log(Level.SEVERE, "Internal error parsing DSID schema, " + ex.toString());
			System.exit(42);
		}

		dbf.setSchema(schema);

		DocumentBuilder db = dbf.newDocumentBuilder();

		Document dsid = null;
		try{
			dsid = db.parse(args[0]);
		}
		catch(SAXException ex){
			logger.log(Level.SEVERE, "Couldn't parse DSID file, "+ex.toString());
			System.exit(5);
		}
		catch(IOException ex){
			logger.log(Level.SEVERE, "Couldn't load DSID file, "+ex.toString());
			System.exit(6);
		}

		Element top = dsid.getDocumentElement();

		String sName = top.getAttribute("name");

		System.out.printf("You've loaded the %s data source description!", sName);

		System.exit(0);
	}
}
